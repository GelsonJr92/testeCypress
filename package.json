{
  "name": "meustestes",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "npm run test:full",
    "cy:open": "cypress open",
    "cy:run": "npm run clean:reports && cypress run && npm run report:create",
    "cy:run:chrome": "npm run clean:reports && cypress run --browser chrome && npm run report:create",
    "cy:run:firefox": "npm run clean:reports && cypress run --browser firefox && npm run report:create",
    "cy:run:edge": "npm run clean:reports && cypress run --browser edge && npm run report:create",
    "cy:run:headless": "npm run clean:reports && cypress run --headless && npm run report:create",
    "cy:run:api": "npm run clean:reports && cypress run --spec \"cypress/e2e/backend/**/*\" && npm run report:create",
    "cy:run:frontend": "echo \"Frontend tests not available. Use: npm run cy:run:api\"",
    "cy:run:smoke": "npm run clean:reports && cypress run --env grepTags=@smoke && npm run report:create",
    "cy:run:regression": "npm run clean:reports && cypress run --env grepTags=@regression && npm run report:create",
    "test:full": "npm run clean:reports && cypress run && npm run report:create",
    "test:api": "npm run clean:reports && cypress run --spec \"cypress/e2e/backend/**/*\" && npm run report:create",
    "test:smoke": "npm run clean:reports && cypress run --env grepTags=@smoke && npm run report:create",
    "test:chrome": "npm run clean:reports && cypress run --browser chrome && npm run report:create",
    "cy:setup": "cypress run --spec 'cypress/e2e/backend/00-setup.cy.ts'",
    "cy:setup:headless": "cypress run --spec 'cypress/e2e/backend/00-setup.cy.ts' --headless",
    "cy:setup:memory": "cypress run --spec 'cypress/e2e/backend/00-setup.cy.ts' --headless",
    "test:api:memory": "npm run clean:reports && cypress run --spec 'cypress/e2e/backend/**/*' && npm run report:create",
    "test:api:with-setup": "npm run cy:setup && npm run cy:run:api && npm run report:merge",
    "test:full:memory": "npm run clean:reports && cypress run --spec 'cypress/e2e/backend/**/*' && npm run report:create",
    "test:full:with-setup": "npm run cy:setup && npm run test:full",
    "test:runner": "echo \"🎯 TestRunner - Execução estruturada de testes\" && echo \"\" && echo \"Uso básico:\" && echo \"  import { testRunner } from '../support/TestRunner';\" && echo \"  testRunner.runAllTests();   // Todos os testes\" && echo \"  testRunner.runApiTests();   // Apenas API\" && echo \"  testRunner.runSmokeTests(); // Apenas smoke\" && echo \"\" && echo \"📖 Documentação completa: cypress/support/TestRunner.ts\"",
    "test:runner:demo": "echo \"🚀 Demo TestRunner - Executando testes debug...\" && cypress run --spec 'cypress/e2e/backend/debug.cy.ts' --env grepTags=debug --quiet",
    "report:advanced": "node -e \"const AdvancedMetrics = require('./cypress/plugins/advanced-metrics'); AdvancedMetrics.finalizeMetrics(null, process.cwd()); const generator = require('./cypress/plugins/html-report-generator.js'); generator.generateAdvancedReport(process.cwd());\"",
    "report:merge": "node scripts/merge-reports.js",
    "report:generate": "node -e \"const fs = require('fs'); const { execSync } = require('child_process'); try { if (!fs.existsSync('cypress/reports/merged.json')) { console.log('AVISO: Arquivo merged.json não encontrado. Pulando geração...'); process.exit(0); } const data = JSON.parse(fs.readFileSync('cypress/reports/merged.json', 'utf8')); if (!data.results || data.results.length === 0 || data.stats.tests === 0) { console.log('AVISO: Nenhum teste encontrado no relatório. Pulando geração HTML...'); process.exit(0); } console.log('Gerando relatório HTML...'); execSync('marge cypress/reports/merged.json --reportDir cypress/reports --reportFilename relatorio-padrao --inline', {stdio: 'inherit'}); console.log('Relatório HTML gerado com sucesso!'); } catch(e) { console.log('AVISO na geração:', e.message); process.exit(0); }\"",
    "report:create": "node -e \"const { execSync } = require('child_process'); try { console.log('🔄 Iniciando criação de relatórios...'); try { execSync('npm run report:merge', {stdio: 'inherit'}); console.log('✅ Merge concluído'); } catch(mergeError) { if (mergeError.status === 0) { console.log('ℹ️  Merge pulado - nenhum teste encontrado'); console.log('⏭️  Pulando geração de relatórios HTML'); console.log('🏁 Pipeline concluído sem relatórios'); process.exit(0); } else { throw mergeError; } } execSync('npm run report:generate', {stdio: 'inherit'}); execSync('npm run report:advanced', {stdio: 'inherit'}); console.log('✅ Relatórios criados com sucesso!'); } catch(e) { console.log('⚠️  AVISO: Erro na criação de relatórios:', e.message); console.log('Continuando execução...'); }\"",
    "report:open": "echo \"Relatório Padrão disponível em: cypress/reports/relatorio-padrao.html\" && echo \"Relatório Avançado disponível em: cypress/reports/advanced-report.html\"",
    "report:full": "npm run report:create && npm run report:open",
    "clean:reports": "node -e \"const fs = require('fs'); const path = require('path'); try { const dirs = ['cypress/reports/mochawesome', 'cypress/reports']; dirs.forEach(dir => { if (!fs.existsSync(dir)) fs.mkdirSync(dir, {recursive: true}); }); const jsonsDir = 'cypress/reports/mochawesome/.jsons'; if (fs.existsSync(jsonsDir)) { fs.readdirSync(jsonsDir).filter(f => f.endsWith('.json')).forEach(f => fs.unlinkSync(path.join(jsonsDir, f))); } const dir = 'cypress/reports/mochawesome'; if (fs.existsSync(dir)) { fs.readdirSync(dir).filter(f => f.endsWith('.json')).forEach(f => fs.unlinkSync(path.join(dir, f))); } ['cypress/reports/merged.json', 'cypress/reports/merged.html'].forEach(f => { if (fs.existsSync(f)) fs.unlinkSync(f); }); ['cypress/reports/html', 'cypress/reports/cypress'].forEach(d => { if (fs.existsSync(d)) fs.rmSync(d, {recursive: true, force: true}); }); console.log('Relatórios limpos com sucesso!'); } catch(e) { console.log('AVISO - Erro na limpeza:', e.message); }\"",
    "clean:reports:full": "node -e \"const fs = require('fs'); ['cypress/reports', 'cypress/screenshots', 'cypress/videos'].forEach(d => { if (fs.existsSync(d)) fs.rmSync(d, {recursive: true, force: true}); }); console.log('Limpeza completa realizada!');\"",
    "clean:cache": "cypress cache clear",
    "install:cypress": "cypress install",
    "verify:cypress": "cypress verify",
    "info:cypress": "cypress info",
    "start:test": "echo \"Start your application server here\"",
    "start:api": "echo \"Start your API server here\"",
    "lint": "echo \"Add your linting command here\"",
    "format": "echo \"Add your formatting command here\""
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "devDependencies": {
    "@cypress/grep": "^4.1.0",
    "@faker-js/faker": "^9.8.0",
    "@types/node": "^22.15.22",
    "cypress": "^14.4.0",
    "cypress-mochawesome-reporter": "^3.8.2",
    "dotenv": "^16.5.0",
    "mochawesome": "^7.1.3",
    "mochawesome-merge": "^5.0.0",
    "mochawesome-report-generator": "^6.2.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3"
  },
  "dependencies": {
    "axios": "^1.9.0"
  }
}
